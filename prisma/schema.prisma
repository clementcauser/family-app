// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Profile {
  id                 String       @id @default(cuid())
  firstName          String?
  lastName           String?
  displayName        String
  userId             String       @map("user_id")
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Family             Family?      @relation(fields: [familyId], references: [id])
  familyId           String?
  invitations        Invitation[] @relation("invitations")
  createdInvitations Invitation[] @relation("created_by")
  ownedFamily        Family?      @relation("owner")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now()) @updatedAt
  tasks              Task[]
  tasksList          TasksList[]  @relation("created_by")

  @@map("profile")
}

model Family {
  id          String       @id @default(cuid())
  name        String
  profiles    Profile[]
  invitations Invitation[]
  owner       Profile?     @relation("owner", fields: [ownerId], references: [id])
  ownerId     String?      @unique

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  @@map("family")
}

model Invitation {
  id          String   @id @default(cuid())
  family      Family   @relation(fields: [familyId], references: [id])
  familyId    String
  guest       Profile  @relation("invitations", fields: [guestId], references: [id])
  guestId     String
  createdAt   DateTime @default(now())
  createdBy   Profile  @relation("created_by", fields: [createdById], references: [id])
  createdById String

  @@map("invitation")
}

model Task {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      TaskStatus    @default(TODO)
  priority    TaskPriority?
  expiresAt   DateTime?
  updatedAt   DateTime      @default(now()) @updatedAt
  createdAt   DateTime      @default(now())
  createdBy   Profile?      @relation(fields: [createdById], references: [id])
  createdById String?
  tasksList   TasksList?    @relation(fields: [tasksListId], references: [id])
  tasksListId String?
}

enum TaskStatus {
  TODO
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model TasksList {
  id          String   @id @default(cuid())
  title       String
  description String?
  tasks       Task[]
  createdAt   DateTime @default(now())
  createdBy   Profile? @relation("created_by", fields: [createdById], references: [id])
  createdById String?
}
